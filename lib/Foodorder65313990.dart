import 'package:flutter/material.dart';
import 'dart:math';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Random Food Menu',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.orange),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'Random Food & Dessert Menu'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final List<Map<String, String>> _menuList = [];

  final List<Map<String, String>> _foodOptions = [
    {'name': 'Pizza', 'icon': 'üçï', 'type': 'Main Dish', 'price': '120 ‡∏ö‡∏≤‡∏ó', 'description': '‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡∏´‡∏≠‡∏°‡πÜ ‡∏ä‡∏µ‡∏™‡πÄ‡∏¢‡∏≠‡∏∞‡πÜ ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏£‡πà‡∏≠‡∏¢'},
    {'name': 'Burger', 'icon': 'üçî', 'type': 'Main Dish', 'price': '90 ‡∏ö‡∏≤‡∏ó', 'description': '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏â‡πà‡∏≥ ‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á‡∏≠‡πà‡∏≠‡∏ô‡∏ô‡∏∏‡πà‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ú‡∏±‡∏Å‡∏™‡∏î‡πÅ‡∏•‡∏∞‡∏ã‡∏≠‡∏™'},
    {'name': 'Sushi', 'icon': 'üç£', 'type': 'Main Dish', 'price': '150 ‡∏ö‡∏≤‡∏ó', 'description': '‡∏ã‡∏π‡∏ä‡∏¥‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏Å‡∏•‡∏°‡∏Å‡∏•‡πà‡∏≠‡∏° ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏•‡∏≤‡∏î‡∏¥‡∏ö‡πÅ‡∏•‡∏∞‡∏ú‡∏±‡∏Å'},
    {'name': 'Pasta', 'icon': 'üçù', 'type': 'Main Dish', 'price': '110 ‡∏ö‡∏≤‡∏ó', 'description': '‡∏û‡∏≤‡∏™‡∏ï‡πâ‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ô‡∏∏‡πà‡∏° ‡∏£‡∏≤‡∏î‡∏ã‡∏≠‡∏™‡∏Ñ‡∏£‡∏µ‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏Å‡∏•‡∏°‡∏Å‡∏•‡πà‡∏≠‡∏°'},
    {'name': 'Ice Cream', 'icon': 'üç¶', 'type': 'Dessert', 'price': '50 ‡∏ö‡∏≤‡∏ó', 'description': '‡πÑ‡∏≠‡∏®‡∏Å‡∏£‡∏µ‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡∏´‡∏≠‡∏° ‡πÄ‡∏¢‡πá‡∏ô‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô ‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥'},
    {'name': 'Cake', 'icon': 'üç∞', 'type': 'Dessert', 'price': '70 ‡∏ö‡∏≤‡∏ó', 'description': '‡πÄ‡∏Ñ‡πâ‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ü‡∏π ‡∏´‡∏ß‡∏≤‡∏ô‡∏≠‡∏£‡πà‡∏≠‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏Ñ‡∏£‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏∏‡πà‡∏°'},
    {'name': 'Fried Rice', 'icon': 'üçõ', 'type': 'Main Dish', 'price': '80 ‡∏ö‡∏≤‡∏ó', 'description': '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏´‡∏≠‡∏°‡πÜ ‡∏≠‡∏£‡πà‡∏≠‡∏¢ ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏ô ‡∏°‡∏µ‡∏ú‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå'},
    {'name': 'Steak', 'icon': 'ü•©', 'type': 'Main Dish', 'price': '200 ‡∏ö‡∏≤‡∏ó', 'description': '‡∏™‡πÄ‡∏ï‡πá‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á ‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏´‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏â‡πà‡∏≥'},
    {'name': 'Fries', 'icon': 'üçü', 'type': 'Snack', 'price': '60 ‡∏ö‡∏≤‡∏ó', 'description': '‡πÄ‡∏ü‡∏£‡∏ô‡∏ã‡πå‡∏ü‡∏£‡∏≤‡∏¢‡∏™‡πå‡∏Å‡∏£‡∏≠‡∏ö‡πÜ ‡∏ó‡∏≠‡∏î‡∏à‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏ó‡∏≠‡∏á ‡∏Å‡∏¥‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏Å‡πá‡∏≠‡∏£‡πà‡∏≠‡∏¢'},
    {'name': 'Tacos', 'icon': 'üåÆ', 'type': 'Main Dish', 'price': '100 ‡∏ö‡∏≤‡∏ó', 'description': '‡∏ó‡∏≤‡πÇ‡∏Å‡πâ‡∏Å‡∏£‡∏≠‡∏ö‡πÜ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏™‡πâ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏±‡∏Å ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏ô'},
    {'name': 'Donut', 'icon': 'üç©', 'type': 'Dessert', 'price': '40 ‡∏ö‡∏≤‡∏ó', 'description': '‡πÇ‡∏î‡∏ô‡∏±‡∏ó‡∏ô‡∏∏‡πà‡∏°‡πÜ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏Ñ‡∏•‡∏∑‡∏≠‡∏ö ‡∏´‡∏ß‡∏≤‡∏ô‡∏´‡∏≠‡∏°‡∏≠‡∏£‡πà‡∏≠‡∏¢'},
    {'name': 'Croissant', 'icon': 'ü•ê', 'type': 'Snack', 'price': '35 ‡∏ö‡∏≤‡∏ó', 'description': '‡∏Ñ‡∏£‡∏±‡∏ß‡∏ã‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏≠‡∏ö‡∏ô‡∏≠‡∏Å‡∏ô‡∏∏‡πà‡∏°‡πÉ‡∏ô ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏´‡∏≠‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏ô‡∏¢'},
    {'name': 'Ramen', 'icon': 'üçú', 'type': 'Main Dish', 'price': '120 ‡∏ö‡∏≤‡∏ó', 'description': '‡∏£‡∏≤‡πÄ‡∏°‡πá‡∏á‡∏ô‡πâ‡∏≥‡∏ã‡∏∏‡∏õ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô ‡πÄ‡∏™‡πâ‡∏ô‡∏ô‡∏∏‡πà‡∏° ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏Å‡∏•‡∏°‡∏Å‡∏•‡πà‡∏≠‡∏°'},
    {'name': 'Hotdog', 'icon': 'üå≠', 'type': 'Snack', 'price': '50 ‡∏ö‡∏≤‡∏ó', 'description': '‡∏Æ‡∏≠‡∏ó‡∏î‡∏≠‡∏Å‡πÑ‡∏™‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏£‡πà‡∏≠‡∏¢ ‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á‡∏ô‡∏∏‡πà‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ã‡∏≠‡∏™'},
    {'name': 'Pancakes', 'icon': 'ü•û', 'type': 'Dessert', 'price': '60 ‡∏ö‡∏≤‡∏ó', 'description': '‡πÅ‡∏û‡∏ô‡πÄ‡∏Ñ‡πâ‡∏Å‡∏´‡∏ô‡∏≤‡∏ô‡∏∏‡πà‡∏° ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏´‡∏ß‡∏≤‡∏ô'},
    {'name': 'Salad', 'icon': 'ü•ó', 'type': 'Main Dish', 'price': '70 ‡∏ö‡∏≤‡∏ó', 'description': '‡∏™‡∏•‡∏±‡∏î‡∏ú‡∏±‡∏Å‡∏™‡∏î‡πÜ ‡∏≠‡∏£‡πà‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡∏î‡∏µ‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û'},
    {'name': 'Cheesecake', 'icon': 'üßÄ', 'type': 'Dessert', 'price': '85 ‡∏ö‡∏≤‡∏ó', 'description': '‡∏ä‡∏µ‡∏™‡πÄ‡∏Ñ‡πâ‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏µ‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô‡∏ô‡∏∏‡πà‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏Ñ‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏Å‡∏£‡∏∏‡∏ö‡∏Å‡∏£‡∏≠‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á'},
    {'name': 'Smoothie', 'icon': 'ü•§', 'type': 'Drink', 'price': '55 ‡∏ö‡∏≤‡∏ó', 'description': '‡∏™‡∏°‡∏π‡∏ó‡∏ï‡∏µ‡πâ‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô ‡∏°‡∏µ‡∏£‡∏™‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏ô‡∏¥‡∏î ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏Ñ‡∏•‡∏≤‡∏¢‡∏£‡πâ‡∏≠‡∏ô'},
    {'name': 'Brownie', 'icon': 'üç´', 'type': 'Dessert', 'price': '75 ‡∏ö‡∏≤‡∏ó', 'description': '‡∏ö‡∏£‡∏≤‡∏ß‡∏ô‡∏µ‡πà‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏ô‡∏∂‡∏ö ‡∏£‡∏™‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å‡πÅ‡∏•‡∏ï‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô'},
    {'name': 'Soup', 'icon': 'ü•£', 'type': 'Main Dish', 'price': '95 ‡∏ö‡∏≤‡∏ó', 'description': '‡∏ã‡∏∏‡∏õ‡∏≠‡∏∏‡πà‡∏ô‡πÜ ‡∏´‡∏≠‡∏°‡∏Å‡∏£‡∏∏‡πà‡∏ô ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏Å‡∏•‡∏°‡∏Å‡∏•‡πà‡∏≠‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô'},
  ];

  void _addRandomMenuItem() {
    final random = Random();
    final randomItem = _foodOptions[random.nextInt(_foodOptions.length)];
    setState(() {
      _menuList.add(randomItem);
    });
  }

  // Function to calculate the total price
  int _calculateTotalPrice() {
    int totalPrice = 0;
    for (var item in _menuList) {
      final price = int.tryParse(item['price']!.split(' ')[0]) ?? 0;
      totalPrice += price;
    }
    return totalPrice;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text(widget.title),
        actions: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Text(
              'Total: ${_calculateTotalPrice()} ‡∏ö‡∏≤‡∏ó',
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
          ),
        ],
      ),
      body: Center(
        child: _menuList.isEmpty
            ? const Text(
                'No items yet! Press the + button to add some food.',
                style: TextStyle(fontSize: 18, color: Colors.grey),
              )
            : ListView.builder(
                itemCount: _menuList.length,
                itemBuilder: (context, index) {
                  final item = _menuList[index];
                  return Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
                    child: Card(
                      elevation: 4,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: ListTile(
                        leading: Text(
                          item['icon']!,
                          style: const TextStyle(fontSize: 28),
                        ),
                        title: Text(
                          item['name']!,
                          style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                        ),
                        subtitle: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              '${item['type']} - ${item['price']}',
                              style: const TextStyle(fontSize: 16, color: Colors.grey),
                            ),
                            const SizedBox(height: 5),
                            Text(
                              'Description: ${item['description']}',
                              style: const TextStyle(fontSize: 14, color: Colors.black87),
                            ),
                          ],
                        ),
                        trailing: IconButton(
                          icon: const Icon(Icons.delete, color: Colors.redAccent),
                          onPressed: () {
                            setState(() {
                              _menuList.removeAt(index);
                            });
                          },
                        ),
                      ),
                    ),
                  );
                },
              ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _addRandomMenuItem,
        tooltip: 'Add Food',
        backgroundColor: Colors.orange,
        child: const Icon(Icons.add),
      ),
    );
  }
}
